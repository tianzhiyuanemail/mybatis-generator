package ${package}.controller.${moduleName};

import com.alibaba.dubbo.config.annotation.Reference;
import com.haier.cbs.system.entity.SysUser;
import com.haier.cbs.web.util.WebUtil;
import com.haier.common.PagerInfo;
import com.haier.common.ServiceResult;
import com.haier.uadmin.system.service.SystemService;
import com.haier.wx.common.DataGrid;
import com.haier.wx.common.HttpJsonResult;
import ${package}.entity.${moduleName}.${className}Entity;
import ${package}.service.${moduleName}.${className}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/${moduleName}/${classname}")
public class ${className}Controller {

    private Logger logger = LoggerFactory.getLogger(getClass());

    @Resource
    private ${className}Service ${classname}Service;

    @Reference(timeout = 3000, lazy = true)
    private SystemService uadminSystemService;

    @RequestMapping(value = "/index.html")
    public String index(ModelMap modelMap){

        return "${moduleName}/${classname}";
    }

    /**
     * 列表
     */
    @RequestMapping(value = "/getList.json")
    @ResponseBody
    public DataGrid<${className}Entity> getList( @RequestParam(defaultValue = "1", required = false) Integer page,
                                                 @RequestParam(defaultValue = "10", required = false) Integer rows,
                                                 String  key){

        DataGrid<${className}Entity> result = new DataGrid<>();

        try {
            PagerInfo pagerInfo = new PagerInfo(rows, page);
            Map<String, Object> map = new HashMap<>();
            if (key!=null&& !"".equals(key)){
                map.put("key",key);
            }

            ServiceResult<List<${className}Entity>> serviceResult = ${classname}Service.queryList(pagerInfo, map);
            if (serviceResult.getSuccess() && serviceResult.getSuccess()) {
                result.setResult(true);
                result.setRows(serviceResult.getResult());
                result.setTotal(serviceResult.getPager().getRowsCount());
            }else {
                result.setResult(false);
                result.setMessage("查询列表出现异常");
            }
        } catch (Exception e) {
            logger.error("module:${className}Controller, action:/${moduleName}/${classname}/getList.json,查询异常" +e);
            result.setResult(false);
        }
        return result;
    }


    @RequestMapping(value="/save.json")
    @ResponseBody
    public HttpJsonResult save(HttpServletRequest request,${className}Entity ${classname}) {
        HttpJsonResult<Boolean> result = new HttpJsonResult<>();
        try {

            SysUser sysUser = uadminSystemService.getUserBySessionId(WebUtil.sessionId(request)).getResult();
            String username = null == sysUser ? "未登录用户" : sysUser.getUserName();

            ServiceResult<Integer> serviceResult = ${classname}Service.save(${classname});
            if(serviceResult.getSuccess()&&serviceResult.getResult()==1){
                result.setData(true);
            }else{
                result.setData(false);
                result.setMessage(serviceResult.getMessage());
            }
        }catch (Exception e){
            result.setData(false);
            result.setMessage("未知异常");
            logger.error("module:${className}Controller, action:/${moduleName}/${classname}/save.json,保存异常" +e);
        }
        return result;
    }

    @RequestMapping(value="/update.json")
    @ResponseBody
    public HttpJsonResult update(HttpServletRequest request,${className}Entity ${classname}) {
        HttpJsonResult<Boolean> result = new HttpJsonResult<>();
        try {

            SysUser sysUser = uadminSystemService.getUserBySessionId(WebUtil.sessionId(request)).getResult();
            String username = null == sysUser ? "未登录用户" : sysUser.getUserName();

            ServiceResult<Integer> serviceResult = ${classname}Service.update(${classname});
            if(serviceResult.getSuccess()&&serviceResult.getResult()==1){
                result.setData(true);
            }else{
                result.setData(false);
                result.setMessage(serviceResult.getMessage());
            }
        }catch (Exception e){
            result.setData(false);
            result.setMessage("未知异常");
            logger.error("module:${className}Controller, action:/${moduleName}/${classname}/update.json,修改异常" +e);
        }
        return result;
    }


    @RequestMapping(value="/remove.json")
    @ResponseBody
    public HttpJsonResult remove(HttpServletRequest request,Integer id) {
        HttpJsonResult<Boolean> result = new HttpJsonResult<>();
        try {
            ${className}Entity ${classname} = new ${className}Entity();
            ${classname}.setId(id);

            SysUser sysUser = uadminSystemService.getUserBySessionId(WebUtil.sessionId(request)).getResult();
            String username = null == sysUser ? "未登录用户" : sysUser.getUserName();

            ServiceResult<Integer> serviceResult = ${classname}Service.update(${classname});
            if(serviceResult.getSuccess()&&serviceResult.getResult()==1){
                result.setData(true);
            }else{
                result.setData(false);
                result.setMessage(serviceResult.getMessage());
            }
        }catch (Exception e){
            result.setData(false);
            result.setMessage("未知异常");
            logger.error("module:${className}Controller, action:/${moduleName}/${classname}/remove.json,删除异常" +e);
        }
        return result;
    }




}
